<div class="top-row ps-3 navbar navbar-dark">
	<div class="container-fluid">
		<a class="navbar-brand" href="/">Rash</a>
		<button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
			<span class="navbar-toggler-icon"></span>
		</button>
	</div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
	<nav>
		<NavItem href="/">
			<span class="oi" data-glyph="home"></span>
			<span>Home</span>
		</NavItem>
		<NavItem href="library">
			<span class="oi" data-glyph="box"></span>
			<span>Library</span>
		</NavItem>
		<NavItem href="profile">
			<span class="oi" data-glyph="person"></span>
			<span>Profile</span>
		</NavItem>
		<NavItem href="settings">
			<span class="oi" data-glyph="spreadsheet"></span>
			<span>Settings</span>
		</NavItem>
	</nav>
</div>

@*/
	@foreach (var dl in DownloadManager.Downloads)
	{
	<div>
	<img src="@dl.Game.CoverURL" width="100px">
	<h4>@dl.Game.Title</h4>
	<div>@(dl.Upload.Upload.DisplayName??dl.Upload.Upload.Filename)</div>
	@if(dl.Downloader.State == DownloaderState.Downloading)
	{
	<div>
	<span>@((dl.Downloader.Progress * 100).ToString("0") + "%")</span>
	<span>@(dl.Downloader.progressBytes.BytesToString()) / @dl.Downloader.totalBytes.BytesToString()</span>
	<span>@dl.Downloader.DownloadSpeed.BytesToString()/s</span>
	</div>
	<progress value="@dl.Downloader.Progress" max="1">@dl.Downloader.Progress</progress>
	}
	else
	{
	<div>@dl.Downloader.State</div>
	}
	</div>
	}

	<div class="nav-item px-3">
	<NavLink class="nav-link" href="downloads">
	<span class="oi oi-data-transfer-download" aria-hidden="true"></span> Downloads
	</NavLink>
	</div>
*@

@code {
	private bool collapseNavMenu = true;

	private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

	private void ToggleNavMenu()
	{
		collapseNavMenu = !collapseNavMenu;
	}

	protected override void OnInitialized()
	{
		DownloadManager.OnDownloadStarted += (dlo, a) =>
		{
			var dl = (GameDownload)dlo;
			UpdateView(null, null);

			dl.Downloader.OnProgress += UpdateView;
			dl.Downloader.OnFinish += UpdateView;
			dl.Downloader.OnError += UpdateView;
			dl.Downloader.OnPaused += UpdateView;
		};
	}

	void UpdateView(object sender, EventArgs args)
	{
		this.InvokeAsync(() => StateHasChanged());
	}
}
